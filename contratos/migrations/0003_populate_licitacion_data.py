# Generated by Django on [fecha actual]

from django.db import migrations

def populate_licitacion_fk(apps, schema_editor):
    """
    Migraci√≥n de datos: vincula los contratos existentes con sus licitaciones
    bas√°ndose en el campo numero_licitacion
    """
    # Obtener los modelos para esta migraci√≥n
    Contrato = apps.get_model('contratos', 'Contrato')
    Licitacion = apps.get_model('licitaciones', 'Licitacion')
    
    # Contadores para estad√≠sticas
    vinculados = 0
    no_encontrados = 0
    sin_numero = 0
    errores = []
    
    print("Iniciando migraci√≥n de datos para vincular contratos con licitaciones...")
    
    # Iterar sobre todos los contratos existentes
    for contrato in Contrato.objects.all():
        if contrato.numero_licitacion:
            # Si el contrato tiene n√∫mero de licitaci√≥n, buscar la licitaci√≥n correspondiente
            try:
                licitacion = Licitacion.objects.get(rfq=contrato.numero_licitacion)
                contrato.licitacion = licitacion
                contrato.save()
                vinculados += 1
                print(f"‚úì Contrato {contrato.numero_contrato} vinculado con licitaci√≥n {licitacion.rfq}")
                
            except Licitacion.DoesNotExist:
                error_msg = f"‚ö†Ô∏è  Contrato {contrato.numero_contrato}: No se encontr√≥ licitaci√≥n con RFQ '{contrato.numero_licitacion}'"
                print(error_msg)
                errores.append(error_msg)
                no_encontrados += 1
                
            except Licitacion.MultipleObjectsReturned:
                error_msg = f"‚ùå Contrato {contrato.numero_contrato}: M√∫ltiples licitaciones encontradas para RFQ '{contrato.numero_licitacion}'"
                print(error_msg)
                errores.append(error_msg)
                no_encontrados += 1
                
            except Exception as e:
                error_msg = f"‚ùå Error inesperado en contrato {contrato.numero_contrato}: {str(e)}"
                print(error_msg)
                errores.append(error_msg)
                no_encontrados += 1
        else:
            sin_numero += 1
            print(f"‚ÑπÔ∏è  Contrato {contrato.numero_contrato}: Sin n√∫mero de licitaci√≥n")
    
    # Mostrar estad√≠sticas finales
    print("\n" + "="*60)
    print("RESUMEN DE MIGRACI√ìN:")
    print("="*60)
    print(f"üìä Contratos procesados: {Contrato.objects.count()}")
    print(f"‚úÖ Contratos vinculados exitosamente: {vinculados}")
    print(f"‚ö†Ô∏è  Contratos sin licitaci√≥n encontrada: {no_encontrados}")
    print(f"‚ÑπÔ∏è  Contratos sin n√∫mero de licitaci√≥n: {sin_numero}")
    
    if errores:
        print(f"\n‚ùå ERRORES ENCONTRADOS ({len(errores)}):")
        for error in errores:
            print(f"   {error}")
    
    print("="*60)
    
    # Si hay muchos errores, dar una advertencia
    if no_encontrados > vinculados:
        print("‚ö†Ô∏è  ADVERTENCIA: M√°s contratos sin vincular que vinculados.")
        print("   Revisa los n√∫meros de licitaci√≥n en tu base de datos.")

def reverse_populate_licitacion_fk(apps, schema_editor):
    """
    Funci√≥n reversa: elimina todas las referencias de ForeignKey
    (√∫til si necesitas revertir la migraci√≥n)
    """
    Contrato = apps.get_model('contratos', 'Contrato')
    
    print("Revirtiendo migraci√≥n: eliminando v√≠nculos con licitaciones...")
    count = Contrato.objects.exclude(licitacion__isnull=True).count()
    Contrato.objects.all().update(licitacion=None)
    print(f"‚úì Se eliminaron {count} v√≠nculos con licitaciones")

class Migration(migrations.Migration):
    
    dependencies = [
        ('contratos', '0002_contrato_licitacion'),  # Ajusta este n√∫mero seg√∫n tu migraci√≥n anterior
        ('licitaciones', '0002_alter_licitacion_estado_lic'),  # Ajusta seg√∫n la √∫ltima migraci√≥n de licitaciones
    ]

    operations = [
        migrations.RunPython(
            populate_licitacion_fk,
            reverse_populate_licitacion_fk,
            atomic=True,  # Ejecuta toda la migraci√≥n en una transacci√≥n
        ),
    ]